;; --------------------- set up package && require -----------
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)
(add-to-list 'load-path "~/Library/Preferences/Aquamacs Emacs/Packages/elpa/joseph-single-dired")
(eval-after-load 'dired '(progn (require 'joseph-single-dired)))

;; --------------------- Boolean Settings ---------------------
(global-auto-complete-mode 1)
(evil-mode 1)
(yas-global-mode 0)
(global-undo-tree-mode 1)

(electric-pair-mode t)
(tool-bar-mode 1)
(blink-cursor-mode 0)
(global-linum-mode 1)
(setq column-number-mode t)
(global-font-lock-mode t)
(global-auto-revert-mode t)
(setq visible-bell t)
(setq inhibit-startup-message t)
(setq enable-recursive-minibuffers nil)
(auto-image-file-mode)
(setq require-final-newline nil)
(setq mode-require-final-newline nil)
(setq transient-mark-mode t)
(setq x-select-enable-clipboard t)
(setq truncate-partial-width-windows nil)
(setq backup-inhibited t)
(setq vc-handled-backends nil)
(setq-default visual-line-mode t)



; ------------------------- value && function settings -----------------------
(set-default-font "monlo 14")
(set-language-environment "utf-8")
(setq scroll-step 1
      scroll-margin 6
      scroll-conservatively 10000)
(defun qiang-comment-dwim-line (&optional arg)
  (interactive "*P")
  (comment-normalize-vars)
  (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
      (comment-or-uncomment-region (line-beginning-position) (line-end-position))
    (comment-dwim arg)))
(setq hippie-expand-try-functions-list
      '(try-expand-dabbrev
        try-expand-dabbrev-visible
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-all-abbrevs
        try-expand-list
        try-expand-line
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))

;; ------------------------- mode-key-reset-------------------------
(define-key evil-normal-state-map "q" 'qiang-comment-dwim-line)
(define-key evil-normal-state-map "s" 'save-buffer)
(define-key evil-normal-state-map "c" 'query-replace-regexp)

(define-key evil-normal-state-map "\C-n" 'evil-next-line)
(define-key evil-normal-state-map "\C-p" 'evil-previous-line)
(define-key evil-normal-state-map "\C-j" 'evil-next-line)
(define-key evil-normal-state-map "\C-k" 'evil-previous-line)
(define-key evil-normal-state-map "\C-e" 'evil-end-of-line)
(define-key evil-normal-state-map "go" 'other-window)

(define-key evil-motion-state-map "w" 'tabbar-forward-tab)
(define-key evil-motion-state-map "W" 'tabbar-backward-tab)
(define-key evil-motion-state-map "g1" 'tabbar-select-tab-1)
(define-key evil-motion-state-map "g2" 'tabbar-select-tab-2)
(define-key evil-motion-state-map "g3" 'tabbar-select-tab-3)
(define-key evil-motion-state-map "g4" 'tabbar-select-tab-4)
(define-key evil-motion-state-map "g5" 'tabbar-select-tab-5)
(define-key evil-motion-state-map "g6" 'tabbar-select-tab-6)
(define-key evil-motion-state-map "g7" 'tabbar-select-tab-7)
(define-key evil-motion-state-map "g8" 'tabbar-select-tab-8)
(define-key evil-motion-state-map "g9" 'tabbar-select-tab-9)

(define-key evil-insert-state-map "\C-j" 'evil-normal-state)
(define-key evil-insert-state-map "\C-k" 'evil-normal-state)
(define-key evil-insert-state-map "\C-h" 'evil-normal-state)
(define-key evil-insert-state-map "\C-l" 'evil-normal-state)

(eval-after-load 'dired
  '(progn
     (evil-make-overriding-map dired-mode-map 'normal t)
     (evil-add-hjkl-bindings dired-mode-map 'normal
       "j" 'dired-next-line                   
       "k" 'dired-previous-line                  
       [(\/)] 'evil-search-forward                
       "n" 'evil-search-next                
       "w" 'tabbar-forward-tab                
       "W" 'tabbar-backward-tab                
       [(\~)] (lambda () (interactive) (dired "~/"))
       "q" (lambda () (interactive) (dired "~/Documents/"))
       [(tab)] 'dired-up-directory
       ";" (lookup-key dired-mode-map ":"))))
(eval-after-load 'ibuffer
   '(progn
      (define-key ibuffer-mode-map "j" 'evil-next-line)
      (define-key ibuffer-mode-map "k" 'evil-previous-line)
      (define-key ibuffer-mode-map "w" 'tabbar-forward-tab)
      (define-key ibuffer-mode-map "W" 'tabbar-backward-tab)))

(define-key undo-tree-map (kbd "C-/") 'hippie-expand) 

;; ------------------------- gloable-key-------------------------
(global-set-key [(control l)] '(lambda () (interactive) (dired ".")))
(global-set-key [(control q)] 'kill-buffer)
(global-set-key [(control tab)] 'tabbar-forward-tab)
(global-set-key [(control s)] 'save-buffer)
(global-set-key [(f1)] 'ibuffer)
(global-set-key [(f2)] 'evil-local-mode)
(global-set-key [(f3)] 'rgrep)
(global-set-key [(f4)] 'eshell)
(global-set-key "\M-;" 'qiang-comment-dwim-line)

;; ------------------------- java script  && css && html-------------------------
(add-to-list 'load-path "~/tern/emacs/")
(autoload 'tern-mode "tern.el" nil t)

(add-hook 'js-mode-hook (lambda () (tern-mode t)))
(add-hook 'js-mode-hook (lambda () (yas-minor-mode t)))
(add-hook 'css-mode-hook (lambda () (yas-minor-mode t)))
(add-hook 'html-mode-hook (lambda () (yas-minor-mode t)))

(eval-after-load 'tern
   '(progn
      (require 'tern-auto-complete)
      (tern-ac-setup)))

(add-to-list 'magic-mode-alist 
    '("\\(?:<\\?xml\\s +[^>]*>\\)?\\s *<\\(?:!--\\(?:[^-]\\|-[^-]\\)*-->\\s *<\\)*\\(?:!DOCTYPE\\s +[^>]*>\\s *<\\s *\\(?:!--\\(?:[^-]\\|-[^-]\\)*-->\\s *\<\\)*\\)?[Hh][Tt][Mm][Ll]"
        . html-mode))
(add-to-list
 'auto-mode-alist
 '("\\.html\\'" . html-mode))